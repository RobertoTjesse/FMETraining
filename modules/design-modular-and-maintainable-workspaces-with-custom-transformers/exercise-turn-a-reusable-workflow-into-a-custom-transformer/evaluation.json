{
  "_id": "trailhead.challenge.exercise-turn-a-reusable-workflow-into-a-custom-transformer.en.us.192",
  "color": "",
  "description_html": "",
  "icon_url": "",
  "langLocale": "en-us",
  "success_html": "",
  "title": "Exercise: Turn a Reusable Workflow into a Custom Transformer",
  "total_mins": 5,
  "type": "challenge",
  "code_evaluation_json": {
    "title": "",
    "description": "",
    "requirements": [],
    "assessment": [],
    "questions": [
      {
        "question": "Why did we include ExpressionEvaluator_2001 in the custom transformer but not ExpressionEvaluator_2011?",
        "questionID": "9f02426b-c762-4545-81fb-d62ce39678c9",
        "options": [
          "Custom transformers can only include one of each type of transformer.",
          "Including both would cause a divide by zero error.",
          "Including both would create performance issues.",
          "We will eventually create a generic custom transformer we can reuse to calculate the 2011 population density as well."
        ],
        "answers": [3]
      },
      {
        "question": "Why was TotalPopulation2001 automatically created as a parameter for the custom transformer while NeighborhoodArea was not?",
        "questionID": "501a7c56-9f7d-414d-ad7e-607d2357e621",
        "options": [
          "Custom transformers can only have one input parameter.",
          "TotalPopulation2001 is an attribute used within the custom transformer from the input data, while NeighborhoodArea is calculated within the custom transformer.",
          "TotalPopulation2001 is an integer and NeighborhoodArea is a floating point number.",
          "We manually chose to expose only TotalPopulation2001 as a parameter when creating the custom transformer by setting the Attribute References parameter to Fix Manually (Advanced)."
        ],
        "answers": [1]
      }
    ]
  },
  "org": ""
}